version: '3.8'

services:
  producer:
    container_name: producer-service
    image: producer-image
    build:
      context: ./producer
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: on-failure
    environment:
      - SPRING_RABBITMQ_HOST=${SPRING_RABBITMQ_HOST}
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - my_network
  consumer:
    container_name: consumer-service
    image: consumer-image
    build:
      context: ./consumer
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    restart: on-failure
    environment:
      - SPRING_RABBITMQ_HOST=${SPRING_RABBITMQ_HOST}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=${SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE}
      - SPRING_DATA_MONGODB_HOST=${SPRING_DATA_MONGODB_HOST}
      - SPRING_DATA_MONGODB_PORT=${SPRING_DATA_MONGODB_PORT}
      - SPRING_DATA_MONGODB_DATABASE=${SPRING_DATA_MONGODB_DATABASE}
      - SPRING_DATA_MONGODB_USERNAME=${SPRING_DATA_MONGODB_USERNAME}
      - SPRING_DATA_MONGODB_PASSWORD=${SPRING_DATA_MONGODB_PASSWORD}
    depends_on:
      - rabbitmq
      - mongodb
    networks:
      - my_network
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: on-failure
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - my_network
    depends_on:
      - mongodb
  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
      - data:/data
    networks:
      - my_network
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
networks:
  my_network:
    driver: bridge
volumes:
  data: {}



